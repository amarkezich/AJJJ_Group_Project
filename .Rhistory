num_better_at_math <- nrow(students[students$better_at_math == TRUE,])
write.csv(students, file='data/grades.csv', row.names = FALSE)
getwd()
################################### Loading R Data (28 points)###################################
## In this section, you'll work with some data that comes built into the R environment.
## Load the `Titanic` data set. You may also want to use RStudio to `View()` it to inspect its rows and columns,
## or just print (selected lines of) it.
data(Titanic)
View(Titanic)
# This data set actually loads in a format called a *table*
# This is not a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
Titanic <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- Titanic[Titanic$Age == 'Child',]
# Create a variable `num_children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num_children <- sum(children$Freq)
# Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
# Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
# (similar to what you did with the `children` variables)
lost_people <- Titanic[Titanic$Survived == 'No',]
largest_death <- max(lost_people$Freq)
largest_death_row <- which(lost_people$Freq == largest_death)
most_lost <- lost_people[largest_death_row,]
# Define a function called `SurvivalRate` that takes in a ticket class (e.g., "1st", "2nd") as an argument.
# This function should return a sentence describing the total survival rate of men vs. "women and children" in that ticketing class.
# For example: `"Of Crew class, 87% of women and children survived and 22% of men survived."`
# The approach you take to generating the sentence to return is up to you. A good solution will likely utilize
# intermediate variables (subsets of data frames) and filtering to produce the required data.
# Avoid using a "loop" in R!
SurvivalRate <- function (ticket_type) {
ticket_info <- Titanic[Titanic$Class == ticket_type,]
adult_info <- ticket_info[ticket_info$Age == 'Adult',]
male_adult <- adult_info[adult_info$Sex == 'Male',]
total_male <- sum(male_adult$Freq)
female_adult <- adult_info[adult_info$Sex == 'Female',]
total_female <- sum(female_adult$Freq)
male_adult_survived <- male_adult[male_adult$Survived == 'Yes',]
female_adult_survived <- female_adult[female_adult$Survived =='Yes',]
survived_male <- sum(male_adult_survived$Freq)
survived_female <- sum(female_adult_survived$Freq)
child_info <- ticket_info[ticket_info$Age == 'Child',]
total_child <- sum(child_info$Freq)
child_survived <- child_info[child_info$Survived == 'Yes',]
survived_child <- sum(child_survived$Freq)
man_rate <- survived_male / total_male * 100
man_rate <- round(man_rate)
others_rate <- (survived_child + survived_female) / (total_child + total_female) * 100
others_rate <- round(others_rate)
result <- paste("Of ", ticket_type, " class, ", others_rate, "% of women and children survived and ", man_rate, "% of men survived.", sep = "")
return(result)
}
# Call your `SurvivalRate()` function on each of the ticketing classes (`Crew`, `1st`,`2nd`, and `3rd`)
SurvivalRate("Crew")
SurvivalRate("1st")
SurvivalRate("2nd")
SurvivalRate("3rd")
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
## Determine if life_expectancy is a data.frame by using the is.data.frame function.
is.data.frame(life_expectancy)
## You may also want to inspect it's content it by View() or by just printing.
View(life_expectancy)
# Create a column `life_expectancy$change` that is the change in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Create a variable `most_improved` that is the name of the country with the largest gain in life expectancy
improved_by <- max(life_expectancy$change)
most_improved_row <- which(life_expectancy$change == improved_by)
most_imporved <- life_expectancy[most_improved_row, "country"]
# Create a variable `num_small_gain` that has the number of countries whose life expectance has improved fewer than 5 years between 1960 and 2013
num_small_gain <- nrow(life_expectancy[life_expectancy$change < 5,])
# Write a function `CountryChange` that takes in a country's name as a parameter, and returns it's change in life expectancy from 1960 to 2013
CountryChange <- function(country_name) {
country_row <- which(life_expectancy$country == country_name)
change <- life_expectancy[country_row, "change"]
return(change)
}
# Using your `CountryChange` function, create a variable `sweden_change` that is the change in life expectancy from 1960 to 2013 in Sweden
sweden_change <- CountryChange("Sweden")
# Define a function `LowestLifeExpInRegion` that takes in a **region** as an argument, and returns
# the **name of the country** with the lowest life expectancy in 2013 (in that region)
LowestLifeExpInRegion <- function(region_name) {
region_table <- life_expectancy[life_expectancy$region == region_name,]
country_row <- which(region_table$le_2013 == min(region_table$le_2013))
country_name <- region_table[country_row, "country"]
return(country_name)
}
# Using the function you just wrote, create a variable `lowest_in_south_asia` that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- LowestLifeExpInRegion("South Asia")
# Write a function `BiggerChange` that takes in two country names as parameters, and returns a sentence that
# describes which country experienced a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" into your function, it would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9), whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers.
BiggerChange <- function(country1, country2) {
change_in_country1 <- CountryChange(country1)
change_in_country2 <- CountryChange(country2)
diff_in_change <- change_in_country1 - change_in_country2
if (diff_in_change > 0) {
winner <- country1
loser <- country2
winner_number <- change_in_country1
loser_number <- change_in_country2
} else {
winner <- country2
loser <- country1
winner_number <- change_in_country2
loser_number <- change_in_country1
}
winner_number <- round(winner_number, 1)
loser_number <- round(loser_number, 1)
diff_years <- winner_number - loser_number
diff_years <- round(diff_years, 1)
result <- paste("The country with the bigger change in life expectancy was ", winner, " (gain=", winner_number, "), whose life expectancy grew by ", diff_years, " years more than ", loser, "'s (gain=", loser_number, ").", sep = "")
return(result)
}
## Using your `BiggerChange` function, create a variable `usa_or_france` that describes who had a larger gain in life expectancy
## (the United States or France)
usa_or_france <- BiggerChange("United States", "France")
write.csv(life_expectancy, file='data/life_expectancy_with_change.csv', row.names = FALSE)
RegionOfHighestChanges <- function() {
East_Asia_Pacific_Table <- life_expectancy[life_expectancy$region == 'East Asia & Pacific',]
Europe_Central_Asia_Table <- life_expectancy[life_expectancy$region == 'Europe & Central Asia',]
Latin_America_Caribbean_Table <- life_expectancy[life_expectancy$region == 'Latin America & Caribbean',]
Middle_East_North_Africa_Table <- life_expectancy[life_expectancy$region == 'Middle East & North Africa',]
North_America_Table <- life_expectancy[life_expectancy$region == 'North America',]
South_Asia_Table <- life_expectancy[life_expectancy$region == 'South Asia',]
Sub_Saharan_Africa_Table <- life_expectancy[life_expectancy$region == 'Sub-Saharan Africa',]
East_Asia_Pacific_Average <- sum(East_Asia_Pacific_Table$change) / nrow(East_Asia_Pacific_Table)
Europe_Central_Asia_Average <- sum(Europe_Central_Asia_Table$change) / nrow(Europe_Central_Asia_Table)
Latin_America_Caribbean_Average <- sum(Latin_America_Caribbean_Table$change) / nrow(Latin_America_Caribbean_Table)
Middle_East_North_Africa_Average <- sum(Middle_East_North_Africa_Table$change) / nrow(Middle_East_North_Africa_Table)
North_America_Average <- sum(North_America_Table$change) / nrow(North_America_Table)
South_Asia_Average <- sum(South_Asia_Table$change) / nrow(South_Asia_Table)
Sub_Saharan_Africa_Average <- sum(Sub_Saharan_Africa_Table$change) / nrow(Sub_Saharan_Africa_Table)
Highest_Average <- max(East_Asia_Pacific_Average, Europe_Central_Asia_Average, Latin_America_Caribbean_Average, Middle_East_North_Africa_Average, North_America_Average, South_Asia_Average, Sub_Saharan_Africa_Average)
Region_of_Highest_Average_Changes_LE <- ""
if (Highest_Average == East_Asia_Pacific_Average) {
Region_of_Highest_Average_Changes_LE <- "East Asia & Pacific"
} else if (Highest_Average == Europe_Central_Asia_Average) {
Region_of_Highest_Average_Changes_LE <- "Europe & Central Asia"
} else if (Highest_Average == Latin_America_Caribbean_Average) {
Region_of_Highest_Average_Changes_LE <- "Latin America & Caribbean"
} else if (Highest_Average == Middle_East_North_Africa_Average) {
Region_of_Highest_Average_Changes_LE <- "Middle East & North Africa"
} else if (Highest_Average == North_America_Average) {
Region_of_Highest_Average_Changes_LE <- "North America"
} else if (Highest_Average == South_Asia_Average) {
Region_of_Highest_Average_Changes_LE <- "South Asia"
} else
Region_of_Highest_Average_Changes_LE <- "Sub-Saharan Africa"
return(Region_of_Highest_Average_Changes_LE)
}
The_Region <- RegionOfHighestChanges(); #final answer
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
plot(life_expectancy$le_1960, life_expectancy$change, main="1960 Life Expectancy v.s. Change in Life Expectancy", xlab="Life Expectancy in 1960", ylab="Change in Life Expectancy over 53 years")
# Programmatically save (i.e., with code, not using the Export button) your graph as a .png file in your repo
dev.copy(png, filename = "plot.png")
dev.off()
################################### DataFrame Manipulation (20 Points)###################################
# Create a vector `first_names` with 5 names in it
first_names <- c("Jin", "Bob", "John", "Beth", "Adam")
# Create a vector `math_grades` with 5 hypothetical grades (0 - 100) in a math course (that correspond to the 5 names above)
math_grades <- c(99, 84, 92, 77, 54)
# Create a vector `spanish_grades` with 5 hypothetical grades (0 - 100) in a Spanish course (that correspond to the 5 names above)
spanish_grades <- c(75, 99, 85, 90, 100)
# Create a data.frame variable `students` by combining your vectors `first_names`, `math_grades`, and `spanish_grades`
students <- data.frame(first_names, math_grades, spanish_grades)
# Create a variable `num_students` that contains the number of rows in your data.frame `students`
num_students <- nrow(students)
# Create a variable `num_courses` that contains the number of columns in your data.frame `students` minus one (b/c of their names)
num_courses <- ncol(students) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to `students$math_grades` minus `students$spanish_grades`
students$grade_diff <- students$math_grades - students$spanish_grades
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that indicates that a student got a better grade in math
students$better_at_math <- students$grade_diff > 0
# Create a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- nrow(students[students$better_at_math == TRUE,])
# Write your `students` data.frame to a new .csv file inside your data/ directory with the filename `grades.csv`. Make sure not to write row names.
write.csv(students, file='data/grades.csv', row.names = FALSE)
################################### Loading R Data (28 points)###################################
## In this section, you'll work with some data that comes built into the R environment.
## Load the `Titanic` data set. You may also want to use RStudio to `View()` it to inspect its rows and columns,
## or just print (selected lines of) it.
data(Titanic)
View(Titanic)
# This data set actually loads in a format called a *table*
# This is not a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
Titanic <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- Titanic[Titanic$Age == 'Child',]
# Create a variable `num_children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num_children <- sum(children$Freq)
# Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
# Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
# (similar to what you did with the `children` variables)
lost_people <- Titanic[Titanic$Survived == 'No',]
largest_death <- max(lost_people$Freq)
largest_death_row <- which(lost_people$Freq == largest_death)
most_lost <- lost_people[largest_death_row,]
# Define a function called `SurvivalRate` that takes in a ticket class (e.g., "1st", "2nd") as an argument.
# This function should return a sentence describing the total survival rate of men vs. "women and children" in that ticketing class.
# For example: `"Of Crew class, 87% of women and children survived and 22% of men survived."`
# The approach you take to generating the sentence to return is up to you. A good solution will likely utilize
# intermediate variables (subsets of data frames) and filtering to produce the required data.
# Avoid using a "loop" in R!
SurvivalRate <- function (ticket_type) {
ticket_info <- Titanic[Titanic$Class == ticket_type,]
adult_info <- ticket_info[ticket_info$Age == 'Adult',]
male_adult <- adult_info[adult_info$Sex == 'Male',]
total_male <- sum(male_adult$Freq)
female_adult <- adult_info[adult_info$Sex == 'Female',]
total_female <- sum(female_adult$Freq)
male_adult_survived <- male_adult[male_adult$Survived == 'Yes',]
female_adult_survived <- female_adult[female_adult$Survived =='Yes',]
survived_male <- sum(male_adult_survived$Freq)
survived_female <- sum(female_adult_survived$Freq)
child_info <- ticket_info[ticket_info$Age == 'Child',]
total_child <- sum(child_info$Freq)
child_survived <- child_info[child_info$Survived == 'Yes',]
survived_child <- sum(child_survived$Freq)
man_rate <- survived_male / total_male * 100
man_rate <- round(man_rate)
others_rate <- (survived_child + survived_female) / (total_child + total_female) * 100
others_rate <- round(others_rate)
result <- paste("Of ", ticket_type, " class, ", others_rate, "% of women and children survived and ", man_rate, "% of men survived.", sep = "")
return(result)
}
# Call your `SurvivalRate()` function on each of the ticketing classes (`Crew`, `1st`,`2nd`, and `3rd`)
SurvivalRate("Crew")
SurvivalRate("1st")
SurvivalRate("2nd")
SurvivalRate("3rd")
################################### Reading in Data (40 points)###################################
# In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
# We'll ask real-world questions about the data by writing the code that answers our question. Here are the steps you should walk through:
# Using the `read.csv` function, read the life_expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
## Determine if life_expectancy is a data.frame by using the is.data.frame function.
is.data.frame(life_expectancy)
## You may also want to inspect it's content it by View() or by just printing.
View(life_expectancy)
# Create a column `life_expectancy$change` that is the change in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Create a variable `most_improved` that is the name of the country with the largest gain in life expectancy
improved_by <- max(life_expectancy$change)
most_improved_row <- which(life_expectancy$change == improved_by)
most_imporved <- life_expectancy[most_improved_row, "country"]
# Create a variable `num_small_gain` that has the number of countries whose life expectance has improved fewer than 5 years between 1960 and 2013
num_small_gain <- nrow(life_expectancy[life_expectancy$change < 5,])
# Write a function `CountryChange` that takes in a country's name as a parameter, and returns it's change in life expectancy from 1960 to 2013
CountryChange <- function(country_name) {
country_row <- which(life_expectancy$country == country_name)
change <- life_expectancy[country_row, "change"]
return(change)
}
# Using your `CountryChange` function, create a variable `sweden_change` that is the change in life expectancy from 1960 to 2013 in Sweden
sweden_change <- CountryChange("Sweden")
# Define a function `LowestLifeExpInRegion` that takes in a **region** as an argument, and returns
# the **name of the country** with the lowest life expectancy in 2013 (in that region)
LowestLifeExpInRegion <- function(region_name) {
region_table <- life_expectancy[life_expectancy$region == region_name,]
country_row <- which(region_table$le_2013 == min(region_table$le_2013))
country_name <- region_table[country_row, "country"]
return(country_name)
}
# Using the function you just wrote, create a variable `lowest_in_south_asia` that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- LowestLifeExpInRegion("South Asia")
# Write a function `BiggerChange` that takes in two country names as parameters, and returns a sentence that
# describes which country experienced a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" into your function, it would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9), whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers.
BiggerChange <- function(country1, country2) {
change_in_country1 <- CountryChange(country1)
change_in_country2 <- CountryChange(country2)
diff_in_change <- change_in_country1 - change_in_country2
if (diff_in_change > 0) {
winner <- country1
loser <- country2
winner_number <- change_in_country1
loser_number <- change_in_country2
} else {
winner <- country2
loser <- country1
winner_number <- change_in_country2
loser_number <- change_in_country1
}
winner_number <- round(winner_number, 1)
loser_number <- round(loser_number, 1)
diff_years <- winner_number - loser_number
diff_years <- round(diff_years, 1)
result <- paste("The country with the bigger change in life expectancy was ", winner, " (gain=", winner_number, "), whose life expectancy grew by ", diff_years, " years more than ", loser, "'s (gain=", loser_number, ").", sep = "")
return(result)
}
## Using your `BiggerChange` function, create a variable `usa_or_france` that describes who had a larger gain in life expectancy
## (the United States or France)
usa_or_france <- BiggerChange("United States", "France")
## Write your `life_expectancy` data.frame to a new .csv file to your data/ directory with the filename `life_expectancy_with_change.csv`.
## Make sure not to write row names.
write.csv(life_expectancy, file='data/life_expectancy_with_change.csv', row.names = FALSE)
################################### Challenge (10 points)###################################
## Create a variable that has the name of the region with the
## highest average change in life expectancy between the two time points.
## Your are welcome to weight the change by population, but just unweighted average over countries is good as well.
## To do this, you'll need to compute the average change across the countries in each region, and then
## compare the averages across regions. Feel free to use any library of your choice, or base R functions.
RegionOfHighestChanges <- function() {
East_Asia_Pacific_Table <- life_expectancy[life_expectancy$region == 'East Asia & Pacific',]
Europe_Central_Asia_Table <- life_expectancy[life_expectancy$region == 'Europe & Central Asia',]
Latin_America_Caribbean_Table <- life_expectancy[life_expectancy$region == 'Latin America & Caribbean',]
Middle_East_North_Africa_Table <- life_expectancy[life_expectancy$region == 'Middle East & North Africa',]
North_America_Table <- life_expectancy[life_expectancy$region == 'North America',]
South_Asia_Table <- life_expectancy[life_expectancy$region == 'South Asia',]
Sub_Saharan_Africa_Table <- life_expectancy[life_expectancy$region == 'Sub-Saharan Africa',]
East_Asia_Pacific_Average <- sum(East_Asia_Pacific_Table$change) / nrow(East_Asia_Pacific_Table)
Europe_Central_Asia_Average <- sum(Europe_Central_Asia_Table$change) / nrow(Europe_Central_Asia_Table)
Latin_America_Caribbean_Average <- sum(Latin_America_Caribbean_Table$change) / nrow(Latin_America_Caribbean_Table)
Middle_East_North_Africa_Average <- sum(Middle_East_North_Africa_Table$change) / nrow(Middle_East_North_Africa_Table)
North_America_Average <- sum(North_America_Table$change) / nrow(North_America_Table)
South_Asia_Average <- sum(South_Asia_Table$change) / nrow(South_Asia_Table)
Sub_Saharan_Africa_Average <- sum(Sub_Saharan_Africa_Table$change) / nrow(Sub_Saharan_Africa_Table)
Highest_Average <- max(East_Asia_Pacific_Average, Europe_Central_Asia_Average, Latin_America_Caribbean_Average, Middle_East_North_Africa_Average, North_America_Average, South_Asia_Average, Sub_Saharan_Africa_Average)
Region_of_Highest_Average_Changes_LE <- ""
if (Highest_Average == East_Asia_Pacific_Average) {
Region_of_Highest_Average_Changes_LE <- "East Asia & Pacific"
} else if (Highest_Average == Europe_Central_Asia_Average) {
Region_of_Highest_Average_Changes_LE <- "Europe & Central Asia"
} else if (Highest_Average == Latin_America_Caribbean_Average) {
Region_of_Highest_Average_Changes_LE <- "Latin America & Caribbean"
} else if (Highest_Average == Middle_East_North_Africa_Average) {
Region_of_Highest_Average_Changes_LE <- "Middle East & North Africa"
} else if (Highest_Average == North_America_Average) {
Region_of_Highest_Average_Changes_LE <- "North America"
} else if (Highest_Average == South_Asia_Average) {
Region_of_Highest_Average_Changes_LE <- "South Asia"
} else
Region_of_Highest_Average_Changes_LE <- "Sub-Saharan Africa"
return(Region_of_Highest_Average_Changes_LE)
}
The_Region <- RegionOfHighestChanges(); #final answer
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
plot(life_expectancy$le_1960, life_expectancy$change, main="1960 Life Expectancy v.s. Change in Life Expectancy", xlab="Life Expectancy in 1960", ylab="Change in Life Expectancy over 53 years")
# Programmatically save (i.e., with code, not using the Export button) your graph as a .png file in your repo
dev.copy(png, filename = "plot.png")
dev.off()
# Then, in a comment below, provide an *interpretation* of the relationship you observe
# Feel free to use any library of your choice, or base R functions.
# What is your interpretation of the observed relationship?
# This graph shows that the overall changes in life expectancy over 53 years are greater when there is lower life expectancy in 1960.
# On the other hand, the changes in life expectancy are insignificant when there is higher life expectancy in 1960.
ui <- fluidPage(
titlePanel("Cereal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("manu.name", "Manufacturer:",
c("Nabisco" = "N",
"Quaker Oats" = "Q",
"Kelloggs" = "K",
"Ralston Purina" = "R",
"General Mills" = "G",
"Post" = "P",
"American Home Food Products" = "A")),
selectInput("sort.by", "Sort by:",
c("Calories" = "calories",
"Protein" = "protein",
"Fat" = "fat",
"Sodium" = "sodium",
"Fiber" = "fiber",
"Carbohydrates" = "carbo",
"Sugars" = "sugars",
"Potassium" = "potass",
"Vitamins" = "vitamins",
"Rating" = "rating")),
tableOutput("data")
),
mainPanel(     # specify content for the "main" column
p("a visualization")
)
)
)
server <- function(input, output) {
output$data <- renderTable({
filter(Cereal.Data, Cereal.Data$mfr == input$manu.name) %>%
select(name, input$sort.by)
}, rownames = TRUE)
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
source("summary.R")
# The ui is the result of calling the `fluidPage()` layout function
# ui <- fluidPage(element1, element2, element3)
ui <- fluidPage(
titlePanel("Cereal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("manu.name", "Manufacturer:",
c("Nabisco" = "N",
"Quaker Oats" = "Q",
"Kelloggs" = "K",
"Ralston Purina" = "R",
"General Mills" = "G",
"Post" = "P",
"American Home Food Products" = "A")),
selectInput("sort.by", "Sort by:",
c("Calories" = "calories",
"Protein" = "protein",
"Fat" = "fat",
"Sodium" = "sodium",
"Fiber" = "fiber",
"Carbohydrates" = "carbo",
"Sugars" = "sugars",
"Potassium" = "potass",
"Vitamins" = "vitamins",
"Rating" = "rating")),
tableOutput("data")
),
mainPanel(     # specify content for the "main" column
p("a visualization")
)
)
)
server <- function(input, output) {
output$data <- renderTable({
filter(Cereal.Data, Cereal.Data$mfr == input$manu.name) %>%
select(name, input$sort.by)
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Cereal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("manu.name", "Manufacturer:",
c("Nabisco" = "N",
"Quaker Oats" = "Q",
"Kelloggs" = "K",
"Ralston Purina" = "R",
"General Mills" = "G",
"Post" = "P",
"American Home Food Products" = "A")),
selectInput("sort.by", "Sort by:",
c("Calories" = "calories",
"Protein" = "protein",
"Fat" = "fat",
"Sodium" = "sodium",
"Fiber" = "fiber",
"Carbohydrates" = "carbo",
"Sugars" = "sugars",
"Potassium" = "potass",
"Vitamins" = "vitamins",
"Rating" = "rating")),
submitButton("Submit"),
tableOutput("data")
),
mainPanel(     # specify content for the "main" column
p("a visualization")
)
)
)
server <- function(input, output) {
output$data <- renderTable({
Cereal.Data <- read.table(file = 'data/cereal.tsv', quote = "", sep = '\t', header = TRUE)
filter(Cereal.Data, Cereal.Data$mfr == input$manu.name) %>%
select(name, input$sort.by)
}, rownames = TRUE)
}
shinyApp(ui, server)
shiny::runApp('C:/Users/Jinhyun Kim/Desktop/UW 2017-2018/Autumn/INFO 201/AJJJ_Group_Project')
runApp('C:/Users/Jinhyun Kim/Desktop/UW 2017-2018/Autumn/INFO 201/AJJJ_Group_Project')
runApp('C:/Users/Jinhyun Kim/Desktop/UW 2017-2018/Autumn/INFO 201/AJJJ_Group_Project')
shiny::runApp('C:/Users/Jinhyun Kim/Desktop/UW 2017-2018/Autumn/INFO 201/AJJJ_Group_Project')
getwd()
setwd("../AJJJ_Group_Project")
runApp()
getwd()
setwd("../AJJJ_Group_Project")
setwd("../AJJJ_Group_Project")
setwd("../AJJJ_Group_Project")
setwd("../AJJJ_Group_Project")
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
